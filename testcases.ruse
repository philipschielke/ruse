; Global count of number of tests run.
(define testnum 0)

; This is avery basic test harness.  It just compares two expressions for equality
; on failure it reports an error.  It also increments the global testnum variable
(define (test name expected expr) (let ((x (set! testnum (+ testnum 1)))) (cond ((equal? expected expr) (displayln (list name 'Pass testnum))) ((= 0 0) (displayln (list name 'ERROR testnum expected expr))))))

(define a 5)
(define (foo a) (let ((b 3)) (+ a b)))
(define (foo2 a) (let ((a 2) (b a)) b))
(define (foo3 x) (x 8))
(define (bar x) (x 3 4))
(define (baz c) (let ((b c)) (let ((c 2)) (+ b c))))
(define (func) (lambda (x) (* x x)))
(define (fact x) (cond ((= x 0) 1) ((= 0 0) (* x (fact (- x 1))))))
(define curryf (lambda (x) (lambda (y) (list x y))))
(define (curryf2 x) (lambda (y) (list x y)))
(define (foo4) (let ((x 1)) (lambda (y) (list x y))))
(define (add3 a b c) (+ a (+ b c)))
(define (square x) (* x x))
(define four (lambda (x) (lambda (y) (lambda (z) (lambda (w) (list x y z w))))))
(define (sumlist l) (cond ((empty? l) 0) ((= 0 0) (+ (car l) (sumlist (cdr l))))))
(define (reverse l) (cond ((empty? l) '()) ((empty? (cdr l)) l) ((= 0 0) (cons (reverse (cdr l)) (car l)) )))
(define (restof a . b) (+ a (car b)))
(define (restof2 . x) x)
; SUB - test subtraction
(test "SUB" 7 (- 19 12))
; UMINUS - test unary minus
(test "UMINUS" -4 (- 6 10))
; MULT - test multiplication
(test "MULT" 21 (* 3 7))
; MULTNEG - test multiplication of negatives
(test "MULTNEG" -40 (* -8 5))
; DIV - test division
(test "DIV" 2 (/ 8 4))
; DIVNEG - test division of negatives
(test "DIVNEG" -2 (/ 8 -4))
; IFFALSE - test if, condition is false
(test "IFFALSE" 5 (if (= 4 3) 6 5))
; IFTRUE - test if, condition is true
(test "IFTRUE" 'a (if (= 3 3) 'a 5))
; LTEMPTY - test < and empty set
(test "LTEMPTY" '() (if (< 4 3) 6 '()))
; GT -test >
(test "GT" 5 (if (> 4 3) 5 -4))
; CARCONS - test car and cons
(test "CARCONS" 'a (car (cons 'a 'b)))
; CDRCONS - test cdr and cons
(test "CDRCONS" 'b (cdr (cons 'a 'b)))
; CARLIST - test car and list
(test "CARLIST" 'a (car (list 'a 'b 'c 'd)))
; CDRLIST - test cdr and list and terminating empty list
(test "CDRLIST" '() (cdr (list 'a)))
; LISTCONS - test that list and the corresponding cons do the same thing
(test "LISTCONS" (list 'a 'b) (cons 'a (list 'b)))
; FACT1 - Test simple function call and cond
(test "FACT1" 1 (fact 0))
; FACT2 - Test simple recursive function call
(test "FACT2" 1 (fact 1))
; FACT3 - Test simple recursive function call
(test "FACT3" 24 (fact 4))
; LET1 - Test override of parameter with let
(test "LET1" 5 (foo 2))
; LET2 - Test let sequencing
(test "LET2" 7 (foo2 7))
; EMPTYLIST - Test list with no parameters
(test "EMPTYLIST" '() (list))
; CONSATOMS - Test list and atoms
(test "CONSATOMS" (cons 'a (cons 'b (cons 'c '()))) (list 'a 'b 'c))
; CARATOMS - Test car with a list of atoms
(test "CARATOMS" 'a (car (list 'a 'b 'c)))
; CDRATOMS - Test cdr with a list of atoms
(test "CDRATOMS" (list 'b 'c) (cdr (list 'a 'b 'c)))
; LAMBDA1 Test passing a nameless function to another function as a parameter
(test "LAMBDA1" 64 (foo3 (lambda (y) (* y y))))
; (test -8 (foo3 (lambda (z) (- z)))) Not supported - No minus with one operand
; LAMBDA2 - Pass a two argument lambda to another function
(test "LAMBDA2" 7 (bar (lambda (a b) (+ a b))))
; LAMBDA3 - Pass a slightly more complicated two argument lambda to another function
(test "LAMBDA3" 21 (bar (lambda (a b) (* a (+ a b)))))
; LAMBDA4 - This passed lambda gets applied to 8 by foo 3
(test "LAMBDA4" (cons 8 '()) (foo3 (lambda (z) (list z))))
; LAMBDA5 - Testing of passing a lambda function with lets to another function
(test "LAMBDA5" 9 (foo3 (lambda (g) (let ((h g) (g 1)) (+ h g)))))
; LET3 - Test nested lets
(test "LET3" 10 (baz 8))
; LET4 - Test passing a function with nested lets to another function
(test "LET4" 10 (foo3 baz))
; LET5 - One final let test from docs.racket-lang.org
(test "LET5" (list 5 2) (let ((x 5)) (let ((x 2) (y x)) (list y x))))
; func
; (func)
; FUNC1 - Func is a function with no arguments returning a function.  Apply that result to 2
(test "FUNC1" 4 ((func) 2))
; CURRY1 - Curry test
(test "CURRY1" (list 1 2) ((curryf 1) 2))
; CURRY2 - curry test
(test "CURRY2" (list 1 2) ((curryf2 1) 2))
; LAMBDA6 - foo4 returns a lambda expression with 1 bound variable.
(test "LAMBDA6" (list 1 19) ((foo4) 19))
; EVAL1 - Test of eval (note that + is not a first-class function in RUSE, so
; we create a wrapper function to do the add.
(test "EVAL1" 21 (eval (list 'add3 4 8 9)))
; EVAL2 - Testing eval with a lambda as the function - currently broken
; (test "EVAL2" 81 ((eval (list 'lambda (list 'x) (list 'square 'x))) 9))
; EVAL3 - Result of eval combined with a another operator
(test "EVAL3" 29 (+ 4 (eval (list 'square 5))))
; APPLY1 - Test of apply
(test "APPLY1" 25 (apply square (list 5)))
; APPLY2 - Test of apply with currying
(test "APPLY2" 11 (apply add3 (cons 6 (eval (list (list 'curryf2 1) 4)))))
; LAMBDA7 - Multiple nested lambda expression
(test "LAMBDA7" (list 1 2 3 4) ((((four 1) 2) 3) 4))
; ZERO?1 - test zero?
(test "ZERO?1" (= 0 0) (zero? 0))
; ZERO?2 - test zero?
(test "ZERO?2" (= 0 1) (zero? 8))
; ZERO?3 test zero?
(test "ZERO?3" (= 0 1) (zero? (list 0)))
; EMPTY?1 - test empty?
(test "EMPTY?1" (= 0 0) (empty? (cdr (list 4))))
; EMPTY?2 - test empty?
(test "EMPTY?2" (= 0 0) (empty? '()))
; EMPTY?3 - test empty?
(test "EMPTY?3" (= 0 1) (empty? (cdr (cons 4 5))))
; EMPTY?4 - test empty?
(test "EMPTY?4" (= 0 1) (empty? (cdr (list 4 5))))
; SUMLIST - recursive function with lists using cond
(test "SUMLIST" 44 (sumlist (list 1 2 3 4 5 6 7 8 9 -1)))
; RESTOF1 - use function that requires 1 arg and any number of args after that
(test "RESTOF1" 5 (restof 2 3 4 5))
; RESTOF2 - use function that requires 1 arg and any number of args after that
(test "RESTOF2" 17 (restof 13 4))
; RESTOF3 - use function that requires 1 arg and any number of args after that
(test "RESTOF3" (list 1 2 3) (restof2 1 2 3))
