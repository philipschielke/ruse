// Generated from /Users/phil/NetBeansProjects/ruse/ruse.g4 by ANTLR 4.4

package ruse;
import java.util.*;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class ruseLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		WS=1, COMMENT=2, INT=3, DOT=4, FLOAT=5, NEWLINE=6, TIMES=7, DIVIDE=8, 
		PLUS=9, MINUS=10, MODULO=11, LPAREN=12, RPAREN=13, CAR=14, CDR=15, CONS=16, 
		LESSTHAN=17, GREATERTHAN=18, EQUALS=19, IF=20, OR=21, AND=22, NOT=23, 
		DEFINE=24, LAMBDA=25, TRUE=26, FALSE=27, LIST=28, COND=29, LET=30, EMPTYQ=31, 
		ZEROQ=32, LISTQ=33, EVAL=34, APPLY=35, STRING=36, ELIST=37, SETBANG=38, 
		EQQ=39, EQUALQ=40, DSPLYLN=41, LOAD=42, ID=43, QUOTE=44, LEADING=45;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'"
	};
	public static final String[] ruleNames = {
		"WS", "COMMENT", "INT", "DOT", "FLOAT", "NEWLINE", "TIMES", "DIVIDE", 
		"PLUS", "MINUS", "MODULO", "LPAREN", "RPAREN", "CAR", "CDR", "CONS", "LESSTHAN", 
		"GREATERTHAN", "EQUALS", "IF", "OR", "AND", "NOT", "DEFINE", "LAMBDA", 
		"TRUE", "FALSE", "LIST", "COND", "LET", "EMPTYQ", "ZEROQ", "LISTQ", "EVAL", 
		"APPLY", "STRING", "ELIST", "SETBANG", "EQQ", "EQUALQ", "DSPLYLN", "LOAD", 
		"ID", "QUOTE", "LEADING"
	};


	public ruseLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "ruse.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2/\u0132\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\3\2\6\2_\n\2\r\2\16\2`\3\2\3\2\3\3\3\3\7\3g\n\3\f\3\16"+
		"\3j\13\3\3\3\5\3m\n\3\3\3\3\3\3\3\3\3\3\4\6\4t\n\4\r\4\16\4u\3\5\3\5\3"+
		"\6\7\6{\n\6\f\6\16\6~\13\6\3\6\3\6\6\6\u0082\n\6\r\6\16\6\u0083\3\7\5"+
		"\7\u0087\n\7\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r"+
		"\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21"+
		"\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26\3\27"+
		"\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31"+
		"\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35"+
		"\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3 \3"+
		" \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3"+
		"#\3#\3$\3$\3$\3$\3$\3$\3%\3%\7%\u00fc\n%\f%\16%\u00ff\13%\3%\3%\3&\3&"+
		"\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3*\3*\3*\3"+
		"*\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3,\3,\3,\7,\u0129\n,\f,\16,\u012c\13"+
		",\3-\3-\3.\5.\u0131\n.\2\2/\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25"+
		"\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32"+
		"\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/\3\2\7\4\2"+
		"\13\13\"\"\4\2\f\f\17\17\3\2\62;\3\2$$\n\2##%(,-//\61\61B\\`ac|\u013b"+
		"\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2"+
		"\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2"+
		"\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2"+
		"\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2"+
		"\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3"+
		"\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2"+
		"\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2"+
		"U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\3^\3\2\2\2\5d\3\2\2\2\7s\3"+
		"\2\2\2\tw\3\2\2\2\13|\3\2\2\2\r\u0086\3\2\2\2\17\u008a\3\2\2\2\21\u008c"+
		"\3\2\2\2\23\u008e\3\2\2\2\25\u0090\3\2\2\2\27\u0092\3\2\2\2\31\u0094\3"+
		"\2\2\2\33\u0096\3\2\2\2\35\u0098\3\2\2\2\37\u009c\3\2\2\2!\u00a0\3\2\2"+
		"\2#\u00a5\3\2\2\2%\u00a7\3\2\2\2\'\u00a9\3\2\2\2)\u00ab\3\2\2\2+\u00ae"+
		"\3\2\2\2-\u00b1\3\2\2\2/\u00b5\3\2\2\2\61\u00b9\3\2\2\2\63\u00c0\3\2\2"+
		"\2\65\u00c7\3\2\2\2\67\u00ca\3\2\2\29\u00cd\3\2\2\2;\u00d2\3\2\2\2=\u00d7"+
		"\3\2\2\2?\u00db\3\2\2\2A\u00e2\3\2\2\2C\u00e8\3\2\2\2E\u00ee\3\2\2\2G"+
		"\u00f3\3\2\2\2I\u00f9\3\2\2\2K\u0102\3\2\2\2M\u0106\3\2\2\2O\u010b\3\2"+
		"\2\2Q\u010f\3\2\2\2S\u0116\3\2\2\2U\u0120\3\2\2\2W\u0125\3\2\2\2Y\u012d"+
		"\3\2\2\2[\u0130\3\2\2\2]_\t\2\2\2^]\3\2\2\2_`\3\2\2\2`^\3\2\2\2`a\3\2"+
		"\2\2ab\3\2\2\2bc\b\2\2\2c\4\3\2\2\2dh\7=\2\2eg\n\3\2\2fe\3\2\2\2gj\3\2"+
		"\2\2hf\3\2\2\2hi\3\2\2\2il\3\2\2\2jh\3\2\2\2km\7\17\2\2lk\3\2\2\2lm\3"+
		"\2\2\2mn\3\2\2\2no\7\f\2\2op\3\2\2\2pq\b\3\2\2q\6\3\2\2\2rt\t\4\2\2sr"+
		"\3\2\2\2tu\3\2\2\2us\3\2\2\2uv\3\2\2\2v\b\3\2\2\2wx\7\60\2\2x\n\3\2\2"+
		"\2y{\t\4\2\2zy\3\2\2\2{~\3\2\2\2|z\3\2\2\2|}\3\2\2\2}\177\3\2\2\2~|\3"+
		"\2\2\2\177\u0081\7\60\2\2\u0080\u0082\t\4\2\2\u0081\u0080\3\2\2\2\u0082"+
		"\u0083\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2\2\u0084\f\3\2\2\2"+
		"\u0085\u0087\7\17\2\2\u0086\u0085\3\2\2\2\u0086\u0087\3\2\2\2\u0087\u0088"+
		"\3\2\2\2\u0088\u0089\7\f\2\2\u0089\16\3\2\2\2\u008a\u008b\7,\2\2\u008b"+
		"\20\3\2\2\2\u008c\u008d\7\61\2\2\u008d\22\3\2\2\2\u008e\u008f\7-\2\2\u008f"+
		"\24\3\2\2\2\u0090\u0091\7/\2\2\u0091\26\3\2\2\2\u0092\u0093\7\'\2\2\u0093"+
		"\30\3\2\2\2\u0094\u0095\7*\2\2\u0095\32\3\2\2\2\u0096\u0097\7+\2\2\u0097"+
		"\34\3\2\2\2\u0098\u0099\7e\2\2\u0099\u009a\7c\2\2\u009a\u009b\7t\2\2\u009b"+
		"\36\3\2\2\2\u009c\u009d\7e\2\2\u009d\u009e\7f\2\2\u009e\u009f\7t\2\2\u009f"+
		" \3\2\2\2\u00a0\u00a1\7e\2\2\u00a1\u00a2\7q\2\2\u00a2\u00a3\7p\2\2\u00a3"+
		"\u00a4\7u\2\2\u00a4\"\3\2\2\2\u00a5\u00a6\7>\2\2\u00a6$\3\2\2\2\u00a7"+
		"\u00a8\7@\2\2\u00a8&\3\2\2\2\u00a9\u00aa\7?\2\2\u00aa(\3\2\2\2\u00ab\u00ac"+
		"\7k\2\2\u00ac\u00ad\7h\2\2\u00ad*\3\2\2\2\u00ae\u00af\7q\2\2\u00af\u00b0"+
		"\7t\2\2\u00b0,\3\2\2\2\u00b1\u00b2\7c\2\2\u00b2\u00b3\7p\2\2\u00b3\u00b4"+
		"\7f\2\2\u00b4.\3\2\2\2\u00b5\u00b6\7p\2\2\u00b6\u00b7\7q\2\2\u00b7\u00b8"+
		"\7v\2\2\u00b8\60\3\2\2\2\u00b9\u00ba\7f\2\2\u00ba\u00bb\7g\2\2\u00bb\u00bc"+
		"\7h\2\2\u00bc\u00bd\7k\2\2\u00bd\u00be\7p\2\2\u00be\u00bf\7g\2\2\u00bf"+
		"\62\3\2\2\2\u00c0\u00c1\7n\2\2\u00c1\u00c2\7c\2\2\u00c2\u00c3\7o\2\2\u00c3"+
		"\u00c4\7d\2\2\u00c4\u00c5\7f\2\2\u00c5\u00c6\7c\2\2\u00c6\64\3\2\2\2\u00c7"+
		"\u00c8\7%\2\2\u00c8\u00c9\7v\2\2\u00c9\66\3\2\2\2\u00ca\u00cb\7%\2\2\u00cb"+
		"\u00cc\7h\2\2\u00cc8\3\2\2\2\u00cd\u00ce\7n\2\2\u00ce\u00cf\7k\2\2\u00cf"+
		"\u00d0\7u\2\2\u00d0\u00d1\7v\2\2\u00d1:\3\2\2\2\u00d2\u00d3\7e\2\2\u00d3"+
		"\u00d4\7q\2\2\u00d4\u00d5\7p\2\2\u00d5\u00d6\7f\2\2\u00d6<\3\2\2\2\u00d7"+
		"\u00d8\7n\2\2\u00d8\u00d9\7g\2\2\u00d9\u00da\7v\2\2\u00da>\3\2\2\2\u00db"+
		"\u00dc\7g\2\2\u00dc\u00dd\7o\2\2\u00dd\u00de\7r\2\2\u00de\u00df\7v\2\2"+
		"\u00df\u00e0\7{\2\2\u00e0\u00e1\7A\2\2\u00e1@\3\2\2\2\u00e2\u00e3\7|\2"+
		"\2\u00e3\u00e4\7g\2\2\u00e4\u00e5\7t\2\2\u00e5\u00e6\7q\2\2\u00e6\u00e7"+
		"\7A\2\2\u00e7B\3\2\2\2\u00e8\u00e9\7n\2\2\u00e9\u00ea\7k\2\2\u00ea\u00eb"+
		"\7u\2\2\u00eb\u00ec\7v\2\2\u00ec\u00ed\7A\2\2\u00edD\3\2\2\2\u00ee\u00ef"+
		"\7g\2\2\u00ef\u00f0\7x\2\2\u00f0\u00f1\7c\2\2\u00f1\u00f2\7n\2\2\u00f2"+
		"F\3\2\2\2\u00f3\u00f4\7c\2\2\u00f4\u00f5\7r\2\2\u00f5\u00f6\7r\2\2\u00f6"+
		"\u00f7\7n\2\2\u00f7\u00f8\7{\2\2\u00f8H\3\2\2\2\u00f9\u00fd\7$\2\2\u00fa"+
		"\u00fc\n\5\2\2\u00fb\u00fa\3\2\2\2\u00fc\u00ff\3\2\2\2\u00fd\u00fb\3\2"+
		"\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0100\3\2\2\2\u00ff\u00fd\3\2\2\2\u0100"+
		"\u0101\7$\2\2\u0101J\3\2\2\2\u0102\u0103\7)\2\2\u0103\u0104\7*\2\2\u0104"+
		"\u0105\7+\2\2\u0105L\3\2\2\2\u0106\u0107\7u\2\2\u0107\u0108\7g\2\2\u0108"+
		"\u0109\7v\2\2\u0109\u010a\7#\2\2\u010aN\3\2\2\2\u010b\u010c\7g\2\2\u010c"+
		"\u010d\7s\2\2\u010d\u010e\7A\2\2\u010eP\3\2\2\2\u010f\u0110\7g\2\2\u0110"+
		"\u0111\7s\2\2\u0111\u0112\7w\2\2\u0112\u0113\7c\2\2\u0113\u0114\7n\2\2"+
		"\u0114\u0115\7A\2\2\u0115R\3\2\2\2\u0116\u0117\7f\2\2\u0117\u0118\7k\2"+
		"\2\u0118\u0119\7u\2\2\u0119\u011a\7r\2\2\u011a\u011b\7n\2\2\u011b\u011c"+
		"\7c\2\2\u011c\u011d\7{\2\2\u011d\u011e\7n\2\2\u011e\u011f\7p\2\2\u011f"+
		"T\3\2\2\2\u0120\u0121\7n\2\2\u0121\u0122\7q\2\2\u0122\u0123\7c\2\2\u0123"+
		"\u0124\7f\2\2\u0124V\3\2\2\2\u0125\u012a\5[.\2\u0126\u0129\5[.\2\u0127"+
		"\u0129\t\4\2\2\u0128\u0126\3\2\2\2\u0128\u0127\3\2\2\2\u0129\u012c\3\2"+
		"\2\2\u012a\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012bX\3\2\2\2\u012c\u012a"+
		"\3\2\2\2\u012d\u012e\7)\2\2\u012eZ\3\2\2\2\u012f\u0131\t\6\2\2\u0130\u012f"+
		"\3\2\2\2\u0131\\\3\2\2\2\16\2`hlu|\u0083\u0086\u00fd\u0128\u012a\u0130"+
		"\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}